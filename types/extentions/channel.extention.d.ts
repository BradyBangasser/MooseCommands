import { AllowedThreadTypeForTextChannel, AwaitMessageCollectorOptionsParams, AwaitMessagesOptions, CategoryChannelResolvable, Channel, ChannelType, Collection, CreateInviteOptions, DMChannel, GuildChannelCloneOptions, Message, MessageCollectorOptions, MessageCollectorOptionsParams, MessageComponentType, MessageManager, MessageOptions, MessagePayload, MessageResolvable, NewsChannel, PartialGroupDMChannel, PermissionOverwriteManager, SetChannelPositionOptions, SetParentOptions, Snowflake, TextChannel, ThreadAutoArchiveDuration, WebhookCreateOptions } from "discord.js";
import MooseClient from "../client";
import MooseGuild from "./guild.extentions";
declare class MooseChannel {
    readonly channel: Channel;
    readonly client: MooseClient;
    readonly guild?: MooseGuild;
    readonly guildId?: string;
    readonly createdAt: Date | null;
    readonly createdTimestamp: number | null;
    readonly id: Snowflake;
    readonly partial: boolean;
    readonly url: string;
    private _cache;
    constructor(client: MooseClient, channel: Channel);
    get deleteable(): boolean | undefined;
    get flags(): any;
    get lastMessage(): Message<boolean> | null;
    get lastMessageId(): string | null;
    get lastPinAt(): Date | null;
    get lastPinTimestamp(): number | null;
    get manageable(): boolean;
    get members(): Collection<string, import("discord.js").GuildMember>;
    get messages(): MessageManager | undefined;
    get name(): string | undefined;
    get nsfw(): boolean | undefined;
    get defaultAutoArchiveDuration(): ThreadAutoArchiveDuration | undefined;
    get permissionsOverwrite(): PermissionOverwriteManager | undefined;
    get permissionsLocked(): boolean | null | undefined;
    get position(): number | undefined;
    get rateLimitPerUser(): number | undefined;
    get rawPosition(): number;
    get threads(): import("discord.js").GuildTextThreadManager<AllowedThreadTypeForTextChannel>;
    get topic(): string | null;
    get type(): ChannelType.GuildText | ChannelType.DM | ChannelType.GuildVoice | ChannelType.GroupDM | ChannelType.GuildCategory | ChannelType.GuildAnnouncement | ChannelType.AnnouncementThread | ChannelType.PublicThread | ChannelType.PrivateThread | ChannelType.GuildStageVoice | ChannelType.GuildForum;
    get viewable(): boolean;
    delete(reason?: string): Promise<import("discord.js").CategoryChannel | DMChannel | PartialGroupDMChannel | NewsChannel | import("discord.js").StageChannel | TextChannel | import("discord.js").PrivateThreadChannel | import("discord.js").PublicThreadChannel<boolean> | import("discord.js").VoiceChannel | import("discord.js").ForumChannel>;
    fetch(force: boolean): Promise<import("discord.js").CategoryChannel | DMChannel | PartialGroupDMChannel | NewsChannel | import("discord.js").StageChannel | TextChannel | import("discord.js").PrivateThreadChannel | import("discord.js").PublicThreadChannel<boolean> | import("discord.js").VoiceChannel | import("discord.js").ForumChannel>;
    isDMBased(): boolean;
    isTextBased(): boolean;
    isThread(): boolean;
    isVoiceBased(): boolean;
    awaitMessageComponent<T extends MessageComponentType>(options?: AwaitMessageCollectorOptionsParams<T, true>): Promise<import("discord.js").MappedInteractionTypes<boolean>[T] | undefined>;
    awaitMessages(options?: AwaitMessagesOptions): Promise<Collection<string, Message<boolean>> | undefined>;
    bulkDelete(messages: number | Collection<Snowflake, Message> | Array<MessageResolvable>, filterOld?: boolean): Promise<Collection<Snowflake, Message | undefined>>;
    clone(options?: GuildChannelCloneOptions): Promise<TextChannel | undefined>;
    createInvite(options?: CreateInviteOptions): Promise<import("discord.js").Invite | undefined>;
    createMessageCollector(options?: MessageCollectorOptions): import("discord.js").MessageCollector | undefined;
    createMessageComponentCollector<T extends MessageComponentType>(options?: MessageCollectorOptionsParams<T, true>): import("discord.js").InteractionCollector<import("discord.js").MappedInteractionTypes<boolean>[(T & import("discord.js").ComponentType.ActionRow) | (T & import("discord.js").ComponentType.Button) | (T & import("discord.js").ComponentType.SelectMenu) | (T & import("discord.js").ComponentType.TextInput)]> | undefined;
    createWebhook(options: WebhookCreateOptions): Promise<import("discord.js").Webhook | undefined>;
    fetchInvites(cache?: boolean): Promise<Collection<string, import("discord.js").Invite> | undefined>;
    fetchWebhooks(): Promise<Collection<string, import("discord.js").Webhook> | undefined>;
    send(options: string | MessagePayload | MessageOptions): Promise<Message<true> | undefined>;
    sendTyping(): Promise<void>;
    setName(name: string, reason?: string): Promise<MooseChannel | undefined>;
    setNFSW(nsfw?: boolean, reason?: string): Promise<this | undefined>;
    setParent(channel: CategoryChannelResolvable, options?: SetParentOptions): Promise<this | undefined>;
    setPosition(position: number, options: SetChannelPositionOptions): Promise<this | undefined>;
    setRateLimitPerUser(rateLimitPerUser: number, reason?: string): Promise<this | undefined>;
    setSlowMode(ms: number, reason?: string): Promise<this | undefined>;
    setTopic(topic: string, reason?: string): Promise<this | undefined>;
    setType(type: ChannelType.GuildNews | ChannelType.GuildText, reason?: string): Promise<this | undefined>;
    toString(): string;
}
export default MooseChannel;
