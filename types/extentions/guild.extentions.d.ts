import { Guild, Snowflake, Collection, GuildBanManager, GuildChannelManager, GuildApplicationCommandManager, GuildDefaultMessageNotifications, GuildExplicitContentFilter, GuildInviteManager, Base64Resolvable, BaseFetchOptions, BufferResolvable, GuildAuditLogs, GuildAuditLogsFetchOptions, GuildAuditLogsResolvable, GuildEditData, GuildEmojiManager, GuildMember, GuildMemberManager, GuildMemberResolvable, GuildMFALevel, GuildPremiumTier, GuildPreview, GuildScheduledEventManager, GuildStickerManager, GuildTemplate, GuildVerificationLevel, GuildWidgetSettings, GuildWidgetSettingsData, ImageURLOptions, Integration, InternalDiscordGatewayAdapterCreator, Locale, PresenceManager, RoleManager, StageInstanceManager, SystemChannelFlagsBitField, SystemChannelFlagsResolvable, TextChannel, TextChannelResolvable, Vanity, VoiceChannel, VoiceChannelResolvable, VoiceStateManager, Webhook, WebSocketShard, WelcomeScreen, WelcomeScreenEditData, Widget } from "discord.js";
import MooseClient from "../client";
declare class MooseGuild {
    private client;
    private discordGuild;
    afkChannelId: Snowflake | null;
    afkTimeout: number;
    applicationId: Snowflake | null;
    approximateMemberCount: number | null;
    approximatePresenceCount: number | null;
    available: boolean;
    bans: GuildBanManager;
    channels: GuildChannelManager;
    commands: GuildApplicationCommandManager;
    defaultMessageNotifications: GuildDefaultMessageNotifications;
    discoverySplash: string | null;
    emojis: GuildEmojiManager;
    explicitContentFilter: GuildExplicitContentFilter;
    invites: GuildInviteManager;
    joinedTimestamp: number;
    large: boolean;
    maximumMembers: number | null;
    maximumPresences: number | null;
    memberCount: number;
    members: GuildMemberManager;
    mfaLevel: GuildMFALevel;
    ownerId: Snowflake;
    preferredLocale: Locale;
    premiumProgressBarEnabled: boolean;
    premiumTier: GuildPremiumTier;
    presences: PresenceManager;
    publicUpdatesChannelId: Snowflake | null;
    roles: RoleManager;
    rulesChannelId: Snowflake | null;
    scheduledEvents: GuildScheduledEventManager;
    shardId: number;
    stageInstances: StageInstanceManager;
    stickers: GuildStickerManager;
    systemChannelFlags: Readonly<SystemChannelFlagsBitField>;
    systemChannelId: Snowflake | null;
    vanityURLUses: number | null;
    voiceStates: VoiceStateManager;
    widgetChannelId: Snowflake | null;
    widgetEnabled: boolean | null;
    createTemplate: (name: string, description?: string) => Promise<GuildTemplate>;
    delete: () => Promise<Guild>;
    discoverySplashURL: (options?: ImageURLOptions) => string | null;
    edit: (data: GuildEditData) => Promise<Guild>;
    editWelcomeScreen: (data: WelcomeScreenEditData) => Promise<WelcomeScreen>;
    equals: (guild: Guild) => boolean;
    fetchAuditLogs: <T extends GuildAuditLogsResolvable = null>(options?: GuildAuditLogsFetchOptions<T>) => Promise<GuildAuditLogs<T>>;
    fetchIntegrations: () => Promise<Collection<Snowflake | string, Integration>>;
    fetchOwner: (options?: BaseFetchOptions) => Promise<GuildMember>;
    fetchPreview: () => Promise<GuildPreview>;
    fetchTemplates: () => Promise<Collection<GuildTemplate['code'], GuildTemplate>>;
    fetchVanityData: () => Promise<Vanity>;
    fetchWebhooks: () => Promise<Collection<Snowflake, Webhook>>;
    fetchWelcomeScreen: () => Promise<WelcomeScreen>;
    fetchWidget: () => Promise<Widget>;
    fetchWidgetSettings: () => Promise<GuildWidgetSettings>;
    leave: () => Promise<Guild>;
    setAFKChannel: (afkChannel: VoiceChannelResolvable | null, reason?: string) => Promise<Guild>;
    setAFKTimeout: (afkTimeout: number, reason?: string) => Promise<Guild>;
    setBanner: (banner: BufferResolvable | Base64Resolvable | null, reason?: string) => Promise<Guild>;
    setDefaultMessageNotifications: (defaultMessageNotifications: GuildDefaultMessageNotifications | null, reason?: string) => Promise<Guild>;
    setDiscoverySplash: (discoverySplash: BufferResolvable | Base64Resolvable | null, reason?: string) => Promise<Guild>;
    setExplicitContentFilter: (explicitContentFilter: GuildExplicitContentFilter | null, reason?: string) => Promise<Guild>;
    setIcon: (icon: BufferResolvable | Base64Resolvable | null, reason?: string) => Promise<Guild>;
    setName: (name: string, reason?: string) => Promise<Guild>;
    setOwner: (owner: GuildMemberResolvable, reason?: string) => Promise<Guild>;
    setPreferredLocale: (preferredLocale: Locale | null, reason?: string) => Promise<Guild>;
    setPublicUpdatesChannel: (publicUpdatesChannel: TextChannelResolvable | null, reason?: string) => Promise<Guild>;
    setRulesChannel: (rulesChannel: TextChannelResolvable | null, reason?: string) => Promise<Guild>;
    setSplash: (splash: BufferResolvable | Base64Resolvable | null, reason?: string) => Promise<Guild>;
    setSystemChannel: (systemChannel: TextChannelResolvable | null, reason?: string) => Promise<Guild>;
    setSystemChannelFlags: (systemChannelFlags: SystemChannelFlagsResolvable, reason?: string) => Promise<Guild>;
    setVerificationLevel: (verificationLevel: GuildVerificationLevel | null, reason?: string) => Promise<Guild>;
    setPremiumProgressBarEnabled: (enabled?: boolean, reason?: string) => Promise<Guild>;
    setWidgetSettings: (settings: GuildWidgetSettingsData, reason?: string) => Promise<Guild>;
    setMFALevel: (level: GuildMFALevel, reason?: string) => Promise<Guild>;
    toJSON: () => unknown;
    id: string;
    constructor(client: MooseClient, guild: Guild);
    get afkChannel(): VoiceChannel | null;
    get maximumBitrate(): number;
    get widgetChannel(): TextChannel | null;
    get joinedAt(): Date;
    get voiceAdapterCreator(): InternalDiscordGatewayAdapterCreator;
    get systemChannel(): TextChannel | null;
    get shard(): WebSocketShard;
    get rulesChannel(): TextChannel | null;
    get publicUpdatesChannel(): TextChannel | null;
    get serverStats(): {};
}
export default MooseGuild;
