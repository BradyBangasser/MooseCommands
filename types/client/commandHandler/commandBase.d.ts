/// <reference types="node" />
import { PathLike } from "fs";
import mongoose from "mongoose";
import { LocalizationMap, RESTPostAPIApplicationCommandsJSONBody } from "discord.js";
import MooseClient, { Arg, ChannelType, CommandOptions, CommandRunArgs, MooseChannel, MooseRole, MooseUser, NamedArgs, SlashBuilderFunction } from "../..";
import DisCrackGuild from "../../extentions/guild.extentions";
import settings from "../../settings";
declare abstract class CommandBase implements CommandOptions {
    protected client: MooseClient;
    readonly name: string;
    readonly description: string;
    readonly aliases: string[];
    readonly ephemeral: boolean;
    readonly privateCommand: boolean;
    readonly nsfw: boolean;
    readonly dm: boolean;
    readonly dmOnly: boolean;
    readonly dft: boolean;
    readonly unknown: boolean;
    readonly hidden: boolean;
    readonly ownerOnly: boolean;
    readonly regex?: RegExp[];
    readonly guarded: boolean;
    readonly channel: boolean;
    readonly channelOnly: boolean;
    readonly argStyle: typeof settings.command.argStyleArray[number];
    readonly cacheResults: boolean;
    readonly schema: mongoose.Schema | mongoose.Schema[];
    readonly maxArgs?: number;
    readonly minArgs: number;
    readonly rest: boolean;
    readonly namedArgs?: NamedArgs;
    readonly adminOnly: boolean;
    readonly modOnly: boolean;
    private _whiteListedRoles;
    private _blacklistedRoles;
    private _blacklistedUsers;
    private _whitelistedUsers;
    private _blacklistedGuilds;
    private _whitelistedGuilds;
    private _blacklistedChannels;
    private _whitelistedChannels;
    readonly serverTimeLimit?: number;
    readonly userTimeLimit?: number;
    readonly allowExtraArgs: boolean;
    readonly interaction: boolean;
    readonly argSplitter: string | ((args: string) => string);
    readonly args: Arg[];
    readonly lastRunBy: number;
    readonly autoaliases: boolean;
    private _apiFormat;
    readonly nsfwOnly: boolean;
    readonly capsSensitive: boolean;
    readonly testOnly: boolean;
    readonly slash: boolean;
    readonly slashCommand: boolean;
    readonly nameLocalizations?: LocalizationMap;
    readonly slashFunction?: SlashBuilderFunction;
    private _cache;
    constructor(options: CommandOptions);
    run(args: CommandRunArgs): Promise<void>;
    interactionRun(args: CommandRunArgs): Promise<void>;
    private _verifyArgStyle;
    get blacklistedChannels(): PathLike | MooseChannel | MooseChannel[] | ChannelType | ChannelType[];
    get whitelistedChannels(): PathLike | MooseChannel | MooseChannel[] | ChannelType | ChannelType[];
    get blacklistedGuilds(): string[] | PathLike | DisCrackGuild | DisCrackGuild[];
    get whitelistedGuilds(): string[] | PathLike | DisCrackGuild | DisCrackGuild[];
    get blacklistedRoles(): string[] | PathLike | MooseRole | MooseRole[];
    get blacklistedUsers(): string[] | PathLike | MooseUser | MooseUser[];
    get whitelistedUsers(): string[] | PathLike | MooseUser | MooseUser[];
    get whiteListedRoles(): string[] | PathLike | MooseRole | MooseRole[];
    get getApiCommandFormat(): RESTPostAPIApplicationCommandsJSONBody;
    initCommand(client: MooseClient): true | void;
    private _autoAlias;
    private _createSlashData;
    get slashData(): void;
    private _createFormatClasses;
    protected cacheManager(): void;
}
export default CommandBase;
